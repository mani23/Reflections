What happens when you initialize a repository? Why do you need to do it?

A new repository is initialized/created with git init. This is the first step towards having and reaping all the benefits of having a repository i.e. saving, having commit history and all.

--------------

How is the staging area different from the working directory and the repository? What value do you think it offers?

Working directory is the local directory on your hard drive. Staging area preps the file before commiting, ready to commit. Repository is when we finally commit the file. So the first step of the process is Working directory, second is Staging area and third is Repository. Having a staging area makes us choose our logical change before commiting.

-----------------

How can you use the staging area to make sure you have one commit per logical change?

Using git diff and git diff --staged, we can ensure we are making only one logical change everytime. 
git diff --staged will show us the difference between the most recent commit and the staging area, and if output is the logical change we want to commit.

-----------------

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

1. When we would like to try two or more things to achieve same task and see which one works better.
2. Situation when we want the basic model to be the same but add different features henceforth. 
3. Maybe we want two different people working on different portions of the branch, which would be later merged.

or,
1. whenever you want to do something different e.g. a new feature, removing a bug.
2. Git Branches help you keep a project organized, particularly if you are sharing it with public. Have your master branch be your production quality branch that never breaks, always works.
3. Then you could have a development branch where active work is being done.
4. Then there could be experimental branches or some unique feature branches. So, you share them with public but with the understanding that the code may break.
5. So if while working, you find a bug, branches allows to context switch and leave the feature you are working on, fix that bug and compartmentalize that work.