==========*******========


cd ~                          # change directories to your home 
directory. (Also if your file name has space, then use it in quotation marks i.e. ""  e.g. "Git And GitHub".)
mkdir version-control         # make version-control directory
cd version-control            # go to version-control directory
mkdir reflections             # create reflections directory
cd reflections                # go to reflections directory
subl lesson_1_reflections.txt # launch sublime with file called lesson_1_reflections.txt (you can replace subl with another editor here if you prefer a different one)
mv - to move the file just saved in the home directory.

-------

Once youâ€™ve saved your file, if you want to double-check that everything has gone as planned, try these commands:

pwd # print working directory - shows what directory you are in
ls  # list the files in this directory

---------
 1. Setting Up Your Workspace on Mac
 =====================================

Downloading necessary files

1. Save this file (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash) in your home directory with the name git-completion.bash.
2. Save this file (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh) in your home directory with the name git-prompt.sh.
3. Download bash_profile_course from the Downloadables section.
If you already have a file in your home directory named .bash_profile, copy the content from bash_profile_course and paste it at the bottom of .bash_profile. Otherwise, move bash_profile_course to your home directory and rename it to .bash_profile. If you use Linux, you may need to name this file .bashrc instead of .bash_profile. (If you're curious to learn more about how bash prompts work, see this page (http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html).)
4. To Make sure you can start your editor from the terminal

5. If you use Sublime, you can do this by:- 
	a. adding the following line to your .bash_profile (you may need to change the path if Sublime is installed in a different location for you):

alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"

Now, you can not simply add anything to .bash_profile file because these kind of files are hidden files, not for the users. So, use this command to change this file to a normal file :-
$ mv .bash_profile bash profile
and after adding the above mentioned line: 
alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"
change the bash_profile to .bash_profile again :)


Making Git configurations

	b. Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from the terminal.

	git config --global core.editor "'/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl' -n -w"
	c. git config --global push.default upstream
	d. git config --global merge.conflictstyle diff3
(Instead of the first command, you may be able to use the simpler git config --global core.editor "subl -n -w" as shown in the video, but many students have found this does not work for them.)

6. Restart the terminal

You'll need to close and re-open the terminal before all your changes take effect.

Changing background color
-------------------------

If you prefer the background color of Git Bash to be something other than black, you can change it in the "Defaults" menu under the "Colors" tab. If you like the background color as-is, you don't need to make any changes. close and re-open git bash too see the change.

Downloading necessary files
---------------------------

Save this file (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash) in your home directory with the name git-completion.bash.

Save this file (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh) in your home directory with the name git-prompt.sh.

Download bash_profile_course from the Downloadables section.
If you already have a file in your home directory named .bash_profile, copy the content from bash_profile_course and paste it at the bottom of .bash_profile. Otherwise, move bash_profile_course to your home directory and rename it to .bash_profile. (If you're curious to learn more about how bash prompts work, see this page (http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html)) close and re-open git bash too see the change.

Making Git configurations
-------------------------

Run the following Git configuration commands. The first one will need to be modified if you are using a text editor other than Sublime, or if Sublime is installed in another location for you. See this page (https://help.github.com/articles/associating-text-editors-with-git/) for the correct command for a couple of other popular text editors. For any other editor, you'll need to enter the command you use to launch that editor from Git Bash.

git config --global core.editor "'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"
git config --global push.default upstream
git config --global merge.conflictstyle diff3


Make sure you can start your editor from Git Bash
-------------------------------------------------


If you use Sublime, you can do this by adding the following line to your .bash_profile:

alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"


Restart Git Bash
----------------

You'll need to close and re-open Git Bash before all your changes take effect.



==========******==============

Use short lines
----------------

Many command line tools, including Git, are less useful if your files contain very long lines. For example, if you use diff to compare two files that have all their content on the same line, diff will only show you that the two files are different. It will not be able to pinpoint the location of the difference for you.

For this reason, it is a good idea to make sure you keep your lines reasonably short when writing your reflections (or other plain-text files). The exact limit is a matter of personal preference. Many developers use a max line length of 80 to 120 characters. Some editors can automatically insert line breaks for you, but for others, like Sublime, you will need to remember to press enter when you want to create a new line.

===========******===============

How did viewing a diff between two versions of a file help you see the bug that
was introduced?
---------------

1. it was easier to locate the bug, considering I don't have to worry abt all the spell-check, command check and any kind of syntax-error.
2. I didn't have to continuously go through both the files, jumping from one file to another, scrolling both at the same time in both directions.

======

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
---------------
    
    A history of a file will show me, where I was confident and right about a certain thing from beginning and others, where i was continuously trying, improvising. Those area may require a few videos or article to clear up my doubts.

    Also, seeing all that I tried will help me in future to choose which version of programming was doing what to my code and project.

=======

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
---------------

 Pros
 -----

 1. You can control when and how much to save, so that you don't have much of cluttered history to go through.


 Cons
 ----
 1. You have to remember each and everytime to manually commit.
 2. If there is a reason when you are unable to do that all your work will be gone.

========

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?
----------------

  That is a super awesome feature because in projects normally multiple files work together to make a project run. Everytime going on each of those files, which are interconnected could be really tedious.

  Half of the efforts are saved if the changes made in one file are done in others to concurrently and also they are saved simultaneously.

  Otherewise, opening, saving and closing them could take a lot of time and lot of efforts.
  So, I think Git is more for coders who will be more beneficial because of these features and so they have provided saving multiple files in one commit as a feature.

  While the others, like Google Docs etc are more used by a common man and for them it is okay to save the one file they are using to be saved at that  period of time, giving them the control.

=========

How can you use the commands git log and git diff to view the history of files?
-------------

 Git log is the command used to generate all the commits ever made. From this we can choose which version of the commit we want to see or compare. 
 Git diff is used to make comparisons between two commits.
 So, first we can use Git log to get the id of the two commits we want to compare. Secondly, we can use Git diff to compare those two commit and get the information required e.g. how many lines were added or removed & what was edited.

=========

How might using version control make you more confident to make changes that
could break something?
-------------

    Knowing that we would not harm our project in experimenting with a few new things and also, that we will be able to revert back and not start from scratch, gives a lot of confidence and boost our moral to try new things without getting scared of loosing the track.

==========

Now that you have your workspace set up, what do you want to try using Git for?
-------------

    version control....editing, saving different versions of my file....